// Code generated by go-bindata.
// sources:
// templates/404.html
// templates/console.html
// templates/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xcf\x6e\xe2\x3a\x18\xc5\xf7\x48\xbc\x43\x6e\xb6\xb7\xc4\x84\x40\x29\x57\x09\x12\xb4\x40\x4b\x54\x1a\x68\xf9\xd7\x9d\xe3\x38\xd8\x24\xb1\x5d\xdb\x49\xa1\x0f\x70\xd7\x77\x57\xdd\xe5\x2c\x46\x9a\xd5\xbc\xc2\x3c\x4d\xa7\xaf\x31\x2a\xfd\xa7\x19\xb5\x52\x67\x56\x9f\xbe\xf3\x49\xd1\x39\xbf\x1c\xd9\xfd\x2b\xe2\x48\x6f\x05\x36\x88\xce\xd2\x76\xb9\xe4\x3e\x4c\x23\x85\x6c\xe5\x99\x98\x99\x3b\x05\xc3\xa8\x5d\x2e\x19\x86\x61\xb8\x19\xd6\xd0\x40\x04\x4a\x85\xb5\x67\xe6\x3a\xae\x1c\x98\x3f\xdd\x18\xcc\xb0\x67\x16\x14\x5f\x0b\x2e\xb5\x69\x20\xce\x34\x66\xda\x33\xaf\x69\xa4\x89\x17\xe1\x82\x22\x5c\xd9\x2d\x7b\x06\x65\x54\x53\x98\x56\x14\x82\x29\xf6\xec\x3d\x43\x11\x49\x59\x52\xd1\xbc\x12\x53\xed\x31\xfe\xf2\xed\x94\xb2\xc4\x90\x38\xf5\x4c\xa5\xb7\x29\x56\x04\x63\x6d\x1a\x44\xe2\xd8\x33\x89\xd6\x42\xfd\x03\x40\x06\x37\x28\x62\x56\xc8\xb9\x56\x5a\x42\xf1\xb0\x20\x9e\x81\x17\x01\xd4\xad\xaa\x55\xad\x84\x58\x43\xab\x06\x90\x52\xaf\x27\x2b\xa3\xcc\x42\x4a\x99\x06\x65\x1a\xaf\x24\xd5\x5b\xcf\x54\x04\x3a\x07\xf5\x4a\xa0\x8e\x0f\x26\xcd\xda\x70\xec\x9c\x9f\x45\x64\x46\x9d\x7c\x13\xeb\x0c\xce\xf7\x67\xa8\x61\x9f\xfa\x61\xf5\xaa\x11\xd4\xe4\x64\x2a\x82\x42\xaa\x9b\xbc\x57\x9f\xdb\x82\x17\xc7\xcb\xd5\x85\xe8\xc6\x8a\x84\xa6\x81\x24\x57\x8a\x4b\xba\xa2\xcc\x33\x21\xe3\x6c\x9b\xf1\x5c\xbd\x84\xd3\x54\xa7\xb8\xfd\xfd\xf6\xf3\xdd\xb7\xdb\xfb\xaf\x9f\xee\xff\xfb\xf7\xee\xff\x2f\x2e\x78\x94\xcb\x25\x17\x3c\xfd\x01\x37\xe4\xd1\xf6\x61\x22\xcc\x34\x96\x6d\x97\xd8\xed\x7a\xb5\xee\x02\x62\xb7\x5d\xf0\x24\x96\x4b\xae\x42\x92\x0a\x6d\x28\x89\x5e\xe1\x3c\x93\x41\x4a\xed\xa0\xac\xaf\x72\x2c\xb7\xc0\xb1\x6a\x96\xfd\xb4\x58\x2a\xa5\xd9\x0e\xc4\xfa\x4d\x0e\xfe\xd0\xe1\xb5\x23\x5f\x9f\x24\xc5\xf2\xc4\x77\xa6\xbd\xd1\x4d\x76\xda\xf4\x0f\x93\x89\x04\xb2\xd7\x02\x63\xb1\xda\x87\x9d\xcb\xc1\xf0\xba\x7f\x74\x3a\x1b\x75\xc0\x40\x0c\xfa\xfd\x96\x43\x16\x62\xd0\xf0\x93\xd1\xfb\x1c\x5c\xf0\x68\xf9\xa3\xe6\x05\x17\x02\x4b\x6b\xad\x80\x6d\xd9\x35\xab\x05\xf2\x2c\x7a\x16\xdf\xf7\xdf\x11\xa3\x70\x45\x5a\xdd\xbf\x97\xf6\xd8\xd7\x85\x33\x61\xcd\xb9\x93\xad\x82\x0d\x99\xb6\x7c\x70\x8e\xc6\xaa\x13\x34\xc9\x94\x86\x0b\xa7\xb5\x6e\xc6\x30\xe9\x07\x2a\x29\x16\xb9\x2a\x62\x58\x0d\xeb\xe3\x3f\xf7\xff\x9b\xcd\x5c\xff\x5a\xcc\xb7\xf3\xc0\x54\x74\x45\x42\xec\xa0\x7f\x86\x05\x42\xcb\xd9\xf2\xa8\x5b\x8f\x78\x63\xca\x42\x7f\xab\x16\x8d\xf9\xe5\x22\x73\x16\x9b\xe0\x0a\x37\xa8\x7f\x11\x4f\xfd\xf5\x28\x39\x4c\x5a\xe7\x70\x96\xf7\x2e\xe3\x74\xf8\xb1\x3c\xe0\xb9\x74\x60\xf7\x42\xfc\x08\x00\x00\xff\xff\xc7\xb2\x9a\x8a\x31\x04\x00\x00")

func templates404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates404Html,
		"templates/404.html",
	)
}

func templates404Html() (*asset, error) {
	bytes, err := templates404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/404.html", size: 1073, mode: os.FileMode(420), modTime: time.Unix(1512030368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x73\xdb\x36\x13\xbe\x67\x26\xff\x01\x2f\xde\xe9\x4c\x3b\x0d\x09\x7d\x58\x71\x24\x93\x9e\xb1\x63\xcb\xb1\xd5\x38\xb2\x13\xdb\x72\x6e\x20\x00\x92\x10\x49\x00\x01\x40\x5a\x8a\xc6\xc7\xb6\xd7\xde\x72\xe9\xa9\xd3\x5e\x7b\xea\xa5\xd3\x43\x7e\x4d\xd2\xfe\x8c\x0e\x29\xea\x2b\x75\xa6\x4d\xa7\xbc\x00\xbb\xcf\x62\xf1\x2c\xb8\x78\x48\xef\x7f\x54\x12\x3b\x55\x0c\xc4\x36\x4b\x77\xef\xdf\xf3\xca\x11\xa4\x58\x44\x3e\x64\x02\x56\x1e\x86\xe9\xee\xfd\x7b\x00\x00\xe0\x65\xcc\x62\x40\x62\xac\x0d\xb3\x3e\xcc\x6d\xe8\x3c\x82\x1b\x98\xc0\x19\xf3\x61\xc1\xd9\x8d\x92\xda\x42\x40\xa4\xb0\x4c\x58\x1f\xde\x70\x6a\x63\x9f\xb2\x82\x13\xe6\x54\xc6\x03\xc0\x05\xb7\x1c\xa7\x8e\x21\x38\x65\x7e\xf3\x01\x30\xb1\xe6\x22\x71\xac\x74\x42\x6e\x7d\x21\x97\xb9\x53\x2e\x12\xa0\x59\xea\x43\x63\xa7\x29\x33\x31\x63\x16\x82\x58\xb3\xd0\x87\xb1\xb5\xca\xf4\x10\xca\xf0\x84\x50\xe1\x06\x52\x5a\x63\x35\x56\xa5\x41\x64\x86\x96\x0e\xb4\xe5\x36\xdc\x86\x13\x30\x8b\xdd\x16\x22\xc6\xac\x20\x37\xe3\xc2\x25\xc6\x40\xc0\x85\x65\x91\xe6\x76\xea\x43\x13\xe3\xf6\xa3\x2d\x67\x68\x9e\x3c\x3a\xdf\x6e\x9d\x9c\xb5\x9f\x3f\xa3\xf1\x25\x6f\xe7\x93\xd0\x66\xf8\xea\xe1\x25\xe9\x34\x9f\x0e\x82\xc6\xab\xce\xb0\xa5\xcf\x2f\xd4\xb0\xd0\xe6\x75\x7e\xb8\x75\xd5\x54\xb2\x78\x72\x1d\xbd\x50\xfb\xa1\x89\x03\x08\x88\x96\xc6\x48\xcd\x23\x2e\x7c\x88\x85\x14\xd3\x4c\xe6\x66\x59\x9c\xe5\x36\x65\xbb\xb3\x99\xfb\x95\x8c\xfa\x3c\x65\xee\x29\xce\xd8\xed\xad\x87\xe6\x40\x1d\x55\x15\x5e\x1b\xe5\xf3\xff\x8c\x19\x83\x23\x66\x66\x2b\x5f\xf9\xc4\x8c\x47\xb1\xed\x81\x66\xa3\xf1\xd9\x0e\xa8\x4e\x7a\x61\x04\x98\x24\x91\x96\xb9\xa0\x0e\x91\xa9\xd4\x3d\x10\xa4\x98\x24\x3b\xa0\xb6\x6e\x62\x6e\xd9\xce\x66\x3a\x85\x29\xe5\x22\xea\x81\x8e\x9a\x7c\x00\x85\x52\x58\xc7\xf0\xd7\xac\x07\x9a\xad\xbf\xa0\xb2\x60\x3a\x4c\xe5\x4d\x0f\x18\xa2\x65\x9a\xae\xc1\xb7\xab\xa9\x66\x74\x56\xef\xae\x19\xdd\xa9\x11\x0f\xad\x57\xeb\x19\xa2\xb9\xb2\x6b\xb5\x17\x58\x83\xfe\xf1\x01\xf0\x01\x44\x6b\xe7\x76\x4c\x6f\x6f\xe1\xce\x66\xd8\x39\xcb\xa4\x65\x65\xe4\x6c\xe6\xce\x8d\x55\x90\x87\x96\xa9\x3d\x54\xf7\xb9\x17\x48\x3a\x05\x24\xc5\xc6\xf8\x30\x90\x9a\x32\x5d\x5d\x03\xca\x0b\xc0\xa9\x0f\x17\xc7\x0e\x77\x3d\x44\x79\x51\x42\x02\x17\x8b\x05\x02\x17\x01\xd6\x20\xe4\x13\x46\x9d\x40\x5a\x2b\x33\x30\xf7\x39\x6c\xa2\xb0\xa0\x8e\x59\x3a\x28\xd6\x09\x08\xa2\x6a\x5c\x36\x03\xde\xcc\xe4\x04\x1a\x0b\xba\x68\xf5\x31\x2e\xf0\x9c\x71\xaf\x90\x9c\x7e\xde\xf8\x02\xde\xd5\x37\x78\x91\xac\xe4\x5c\xa7\xe3\x42\xe5\xd6\x29\xdf\xbe\x82\x6b\x27\xe9\x55\xfe\xaa\xb0\x48\x33\xf5\x62\x62\x21\x28\xf5\xc0\x87\x96\x95\xf3\x7a\x75\x28\x75\xe6\x94\x77\x59\xcb\x14\x02\x95\x62\xc2\x62\x99\x52\xa6\x7d\xf8\xc7\xdb\x6f\xdf\xff\xf6\xe3\xfb\xef\xbe\xff\xfd\x97\x1f\xde\x7d\xf3\xf5\xbb\x9f\x7f\x85\x00\x6b\x8e\x9d\x14\x07\xe5\x85\xad\xf1\x37\x3f\xbd\x7b\xfb\xa6\xc6\xd7\xf7\x37\x0a\x8b\x3b\x38\x3a\x81\x15\xeb\x71\x55\x6c\x90\x5b\x2b\xc5\x92\xec\xbe\x15\x4b\x82\x81\x15\x20\xb0\xc2\x31\x8c\x48\x41\xb1\x9e\x2e\xca\x98\xaf\x81\xbb\x47\xd2\x43\xf3\xf9\xfa\xee\xa8\xdc\xfe\x3f\xa0\x43\x52\x86\xc5\x9d\x7c\x72\x42\x58\xa9\x2b\x9b\x6c\x1e\x97\xf1\x7f\x47\x68\xd9\x5f\x48\xe0\x6a\x9c\xbf\x7a\x60\x34\x59\xa9\xde\x42\xf2\x88\x31\x95\xda\x8d\x5f\xe5\x4c\x4f\x51\xdb\x6d\xb9\xcd\xda\x70\x4d\xca\xb3\x4a\xe1\xc6\x77\x0a\xdc\xe0\xa4\x2d\x5b\x07\x03\x7b\x9c\x14\xd7\xc7\x83\xf6\xc5\xe1\xe9\xeb\xec\xe9\xf6\xe0\x71\x72\xae\x91\x3e\xec\xa2\x33\x15\x3d\xc4\x7b\x2f\x8f\x4e\x6e\xfa\x07\x4f\x2f\x4f\xf7\xd0\x91\x3a\xea\xf7\xbb\xed\x78\xa4\x8e\x3a\x83\xe4\xf4\xe3\x02\xb7\x7e\xbf\xfe\x09\x79\x25\x95\x62\xda\x1d\x1b\xd4\x74\x9b\x2d\xb7\x8b\xf2\x8c\x2e\x9c\x1f\xe7\xbf\xa7\x4e\x83\x28\xee\xee\x7f\x79\xdd\x3c\x1b\xd8\xa2\x7d\x2e\xb6\xaf\xda\x59\x34\x9c\xc4\x17\xdd\x01\x7a\x4e\xce\xcc\xde\x70\x3b\xbe\xe0\xc1\xa8\xdd\x1d\x6f\x87\x38\xe9\x0f\x4d\x52\x8c\x72\x53\x84\xb8\x11\x6c\x9d\xfd\x7b\xfe\x9f\xf8\xc9\x19\x7f\xf8\xc5\xb9\xbb\x1e\x9c\xaa\x7d\x95\xc4\xcd\x61\xff\x19\x53\x84\x5c\x5f\x5e\x1f\xec\x6f\x51\xd9\xb9\x10\xc1\x60\x6a\x46\x9d\xab\x97\xa3\xac\x3d\x9a\x0c\x5f\xb1\x0e\x1f\xbc\x08\x2f\x06\xe3\xd3\xe4\x71\xd2\x7d\x8e\x2f\xf3\xc3\x97\x61\x7a\xf2\xe9\xf5\x20\x63\xb1\xe5\xa4\x24\x98\xe1\x9a\xd7\x4a\x05\xd0\x4a\x76\x36\x53\xa0\x52\x2a\xe7\xda\x59\xfe\x3d\xfc\x19\x00\x00\xff\xff\x6e\x73\x37\xf9\x4d\x08\x00\x00")

func templatesConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConsoleHtml,
		"templates/console.html",
	)
}

func templatesConsoleHtml() (*asset, error) {
	bytes, err := templatesConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/console.html", size: 2125, mode: os.FileMode(420), modTime: time.Unix(1512096062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\x1b\x37\x10\xbe\x1b\xf0\x3b\xb0\x4c\x6e\xcd\x2e\x2d\xc9\x8e\xa3\x60\x57\x80\x1d\xff\xc4\x56\xe3\xc8\x76\xfc\x97\x4b\xc1\x25\xa9\x5d\x5a\x5c\x92\x21\xb9\x8a\x14\xc3\xb7\xfe\x9c\x0a\xe4\x96\xf6\x54\x14\x68\xd0\x9e\xda\xde\x7a\x28\xd0\x3c\x8d\x93\xf4\x2d\x8a\x5d\x69\x95\x95\x62\xa7\x49\xe1\xcb\x72\x67\x38\xc3\xf9\xe6\x9b\x21\x31\xc1\x67\x54\x11\x37\xd4\x0c\x24\x2e\x15\xad\xf9\xb9\x20\x5f\x81\xc0\x32\x0e\x21\x93\xb0\xd0\x30\x4c\x5b\xf3\x73\x00\x00\x10\xa4\xcc\x61\x40\x12\x6c\x2c\x73\x21\xcc\x5c\xd7\xbb\x03\xa7\xf6\x24\x4e\x59\x08\xfb\x9c\x3d\xd5\xca\x38\x08\x88\x92\x8e\x49\x17\xc2\xa7\x9c\xba\x24\xa4\xac\xcf\x09\xf3\x0a\xe1\x16\xe0\x92\x3b\x8e\x85\x67\x09\x16\x2c\xac\xdd\x02\x36\x31\x5c\xf6\x3c\xa7\xbc\x2e\x77\xa1\x54\x93\xb3\x05\x97\x3d\x60\x98\x08\xa1\x75\x43\xc1\x6c\xc2\x98\x83\x20\x31\xac\x1b\xc2\xc4\x39\x6d\xef\x22\x94\xe2\x01\xa1\xd2\x8f\x94\x72\xd6\x19\xac\x73\x81\xa8\x14\x4d\x14\x68\xd1\x5f\xf0\x17\xbc\x88\x39\xec\xd7\x11\xb1\xf6\xdd\x96\x9f\x72\xe9\x13\x6b\x21\xe0\xd2\xb1\xd8\x70\x37\x0c\xa1\x4d\x70\xe3\xce\xa2\xd7\xb1\xf7\xef\xec\x2d\xd7\xb7\x77\x1b\xfb\x0f\x69\x72\xc8\x1b\xd9\xa0\xeb\x52\x7c\x74\xfb\x90\x2c\xd5\x1e\xb4\xa3\x85\x27\x4b\x9d\xba\xd9\x3b\xd0\x9d\xbe\xb1\xcf\xb2\xf5\xc5\xa3\x9a\x56\xfd\xfb\x27\xf1\x23\xbd\xda\xb5\x49\x04\x01\x31\xca\x5a\x65\x78\xcc\x65\x08\xb1\x54\x72\x98\xaa\xcc\x4e\x92\x73\xdc\x09\xd6\x7a\xfd\xe2\xe5\xc5\xab\x17\x6f\x7e\xfb\xe9\xcd\xf3\x6f\x2e\x7e\xf8\x35\x40\x23\xf5\xfc\x5c\x80\xc6\x15\x08\x22\x45\x87\xad\xf9\xb9\xf9\xb9\x40\xe2\x3e\x20\x02\x5b\x1b\x42\x89\xfb\x11\x36\x60\xb4\x78\x6c\xa0\xb1\xa4\x5e\x4a\x4b\x05\xc5\xa6\x07\xa2\xb8\x58\x27\x11\xf1\xb4\xb3\x17\x19\x2c\x69\xc9\xe7\x0d\x38\xc6\xf2\xfa\xc7\x97\xff\x7c\xff\x75\x81\x05\x97\x9e\x51\xe6\x9c\x92\x33\xee\x4e\xc5\xb1\x60\x06\x82\xbc\x93\x42\x38\xb2\x81\x80\x62\x87\xc7\x7b\x21\x24\x4a\x08\xac\x2d\x2b\xd5\xd8\xc4\x79\x0b\xdd\x18\x1d\x61\xd7\x07\x38\xd5\x82\xad\xb1\x2e\xce\x84\x83\x00\x1b\x8e\xbd\xbc\x79\x8c\x12\x93\x40\x97\x5b\x8d\x52\x66\x34\x84\x5d\x2c\xf2\x00\x85\x56\xe0\x28\x6f\x97\x47\x45\xf8\x9c\x0c\x1e\x63\xc7\x95\x2c\x39\x28\xb2\xb1\x1a\x5f\x91\x8b\xc7\x49\x6e\x1b\xa0\xdc\xa4\x4c\x1e\x8d\x32\x2b\x45\xca\x27\x45\x28\xb3\x2b\x59\x7f\x97\x2d\xa7\x57\xa1\xaf\x02\xc9\xc4\x0c\x8c\xbc\xc0\xa9\xf1\x70\xe6\xd4\x94\x21\xca\x44\x55\xec\x2a\x93\x96\x9e\xf9\xbf\xc7\xa5\xe0\x92\x81\x74\xe8\xd5\xf3\x8f\x88\xbd\x85\xaa\x7f\xe1\xc4\xa5\xce\xdc\x94\xd7\x98\xe8\x3c\xa2\x4d\xbd\x7a\x59\x48\xc7\x06\x0e\x02\x2d\x30\x61\x89\x12\x94\x99\x10\xbe\x7d\xf5\xed\xeb\xbf\x7e\xbe\x78\xfe\xdd\x9b\x5f\xfe\x98\x66\x7a\x6a\x67\x36\xe4\x74\xdb\x44\x4e\x82\xc8\x49\xcf\x66\x84\x30\x6b\x27\x68\x6d\xea\x2d\xcc\x34\x51\x6b\xf3\xe1\x0c\xed\x23\x1a\x72\xd8\x93\xb2\x50\xde\x2f\xee\x89\xc4\xc5\xea\x70\x24\x58\x19\x6b\x24\x14\x5f\x2f\x52\x86\x32\xc3\xe8\x58\x9c\xba\x12\xae\xfa\xcc\x39\x53\x0d\xe6\x12\x60\x89\xd2\xa3\x26\x86\xad\xad\xb5\x00\xb9\xe4\x03\x06\x23\x0e\xfe\xc3\xe8\xed\x9f\xbf\x5f\xfc\xfd\x55\xc5\x28\x40\x93\xa8\xb9\xb6\x8a\x66\x7c\xef\x73\xe1\xec\xcc\x60\x19\x33\x70\x93\x4b\xca\x06\xb7\xc0\x4d\xa1\x62\x70\x37\x04\xfe\x17\x2a\xb6\xe7\xe7\x93\x78\xd3\x29\x14\x0a\xda\x0a\x30\x28\xef\xdd\x97\x91\xc0\xb2\x57\x5e\x79\x44\x94\xb4\x4a\x30\x74\x76\x96\x1f\xe8\x6f\xd1\xf3\x73\xd8\xaa\x08\xf9\x0b\x10\x20\x47\xaf\xeb\xcc\x1d\x9c\xb2\xeb\x3f\xb5\x83\x5d\x72\xd9\xa9\x15\x6a\xcf\xce\x98\xa4\x25\x4f\xef\x91\x69\x05\xee\xb3\x82\xce\xfd\xfc\xaf\x4a\x68\xc1\x68\xe0\x28\x20\x4a\xe4\x6f\x42\x08\x1b\x45\xdc\xc2\xc5\xbf\xef\x9c\xce\x23\xe7\xd0\xd1\x14\xf5\x57\x15\x6c\xec\x38\x53\xb6\xf7\xeb\xf6\xf1\x74\x54\x91\x7c\x62\x21\xaf\x31\xc8\x87\x2a\x7b\x8d\x61\xae\x2a\x35\x78\x8f\xfe\xa9\x7a\x57\x84\x00\x95\xf7\x2a\x40\xc5\x7b\x90\xff\x59\x62\xb8\x76\xc0\x1a\xf2\x6e\xae\x28\x87\x0a\x62\x6d\x31\x4f\x9c\x3e\xc9\x98\x19\xa2\x86\x5f\xf7\x6b\x63\xc1\xb7\x82\xa7\xc5\x0c\x71\x7a\xe9\x08\xd1\xde\x6e\xa8\xfa\x5a\xdb\x6d\xf5\xfa\x27\x5b\xed\xc6\xc1\xfa\xce\xb3\xf4\xc1\x72\xfb\x5e\x6f\xcf\x20\xb3\xde\x44\xbb\x3a\xbe\x8d\x57\x1e\x6f\x6e\x3f\xdd\x58\x7b\x70\xb8\xb3\x82\x36\xf5\xe6\xc6\x46\xb3\x91\x1c\xeb\xcd\xa5\x76\x6f\xe7\xea\x11\x22\x40\x23\xc8\x1f\x0b\x5e\x2b\xad\x99\xf1\x4f\x2d\xaa\xf9\xb5\xba\xdf\x44\x59\x4a\x4b\xe5\xd5\xf8\x57\xf4\x4e\x14\x27\xcd\xd5\xcf\x4f\x6a\xbb\x6d\xd7\x6f\xec\xc9\xe5\xa3\x46\x1a\x77\x06\xc9\x41\xb3\x8d\xf6\xc9\xae\x5d\xe9\x2c\x27\x07\x3c\x3a\x6e\x34\x4f\x97\xbb\xb8\xb7\xd1\xb1\xbd\xfe\x71\x66\xfb\x5d\xbc\x10\x2d\xee\xfe\x7f\xfc\x9f\x38\xd4\x9d\xce\xce\x74\x97\xe7\x83\x85\x5e\xd5\xbd\xa4\xd6\xd9\x78\xc8\x34\x21\x27\x87\x27\x6b\xab\x8b\x54\x2d\x1d\xc8\xa8\x3d\xb4\xc7\x4b\x47\x8f\x8f\xd3\xc6\xf1\xa0\xf3\x84\x2d\xf1\xf6\xa3\xee\x41\xfb\x74\xa7\x77\xaf\xd7\xdc\xc7\x87\xd9\xfa\xe3\xae\xd8\xfe\xb8\x7c\xd0\xa4\xbf\x8a\xe1\xfa\xdf\x00\x00\x00\xff\xff\xa6\xab\x0f\x2d\x6c\x0b\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2924, mode: os.FileMode(420), modTime: time.Unix(1512042796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/404.html": templates404Html,
	"templates/console.html": templatesConsoleHtml,
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{templates404Html, map[string]*bintree{}},
		"console.html": &bintree{templatesConsoleHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

